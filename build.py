import argparse
from pathlib import Path
import sys

from PyQt5.uic import compileUiDir
from PyQt5.pyrcc_main import main as pyrcc_main_func
import nsist


build_dir = Path(__file__).parent / 'build'
designer_dir = Path(__file__).parent / 'designer'
src_dir = Path(__file__).parent / 'src'
ui_dir = src_dir / 'ui'
resources_file = src_dir / 'resources.py'


def build_ui():
    remove_ui()
    compileUiDir(designer_dir, map=lambda d, f: (ui_dir, f))
    print(f"*.ui files compiled to {ui_dir}")


def build_resources():
    remove_resources()
    qrc_file = 'resources.qrc'
    sys.argv = ['', '-o', str(resources_file), str(qrc_file)]
    pyrcc_main_func()
    print(f"{qrc_file} file compiled to {resources_file}")


def build_installer():
    remove_installer()
    build_ui()
    build_resources()

    from src import application

    icon = Path('icons', application.ICON).resolve()

    requirements = open('requirements.txt').read().strip().split('\n')
    requirements.insert(0, 'setuptools==28.8.0')

    while True:
        builder = nsist.InstallerBuilder(
            appname=application.NAME,
            version=application.VERSION,
            icon=icon,
            shortcuts={
                application.NAME: {
                    'entry_point': 'src.application:main',
                    'console': False,
                    'icon': icon,
                }
            },
            py_version='3.6.0',
            py_bitness=64,
            pypi_wheel_reqs=requirements,
        )

        try:
            builder.run()
        except nsist.pypi.NoWheelError as e:
            print(e)
            package_name, package_version = str(e).split(' ')[-2:]
            requirements.remove(f'{package_name}=={package_version}')
        else:
            break
    print(f"Installer built using Pynsist is in {build_dir}")


def remove_ui():
    for path in ui_dir.iterdir():
        if path.name != '__init__.py':
            _remove(path)


def remove_resources():
    _remove(resources_file)


def remove_installer():
    _remove(build_dir)


def _remove(path):
    print(f"Removing {path}")
    if path.is_dir():
        for item in path.iterdir():
            _remove(item)
        path.rmdir()
    else:
        try:
            path.unlink()
        except FileNotFoundError:
            pass


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description="Utilities for building the application."
    )
    parser.add_argument(
        '-rm', '--remove',
        help="Remove the artifacts generated by building the target",
        action='store_true',
    )
    parser.add_argument(
        'target',
        help="Target to build",
        choices=['ui', 'resources', 'installer'],
    )
    args = parser.parse_args()

    if args.remove:
        locals()['remove_' + args.target]()
    else:
        locals()['build_' + args.target]()
